"use strict";
var core_1 = require("@angular/core");
var gestures_1 = require("ui/gestures");
var grid_layout_1 = require("ui/layouts/grid-layout");
var label_1 = require("ui/label");
var card_service_1 = require("./card.service");
var nativescript_ngx_fonticon_1 = require("nativescript-ngx-fonticon");
var CardComponent = (function () {
    function CardComponent(cardService, fonticon) {
        this.cardService = cardService;
        this.fonticon = fonticon;
        this.i = 0;
    }
    CardComponent.prototype.ngOnInit = function () {
        this.emoji = this.cardService.getEmoji();
        //initial card
        this.code = this.emoji[this.i].code;
        //get ready for the swiping!
        for (var key in this.emoji) {
            this.handleSwipe(key);
        }
    };
    CardComponent.prototype.handleSwipe = function (key) {
        this.i--;
        var grid = new grid_layout_1.GridLayout();
        var emoji = new label_1.Label();
        var yes = this.yes.nativeElement;
        var no = this.no.nativeElement;
        var absolutelayout = this.al.nativeElement;
        var swipeleft = this.swipeleft.nativeElement;
        var swiperight = this.swiperight.nativeElement;
        //set the emoji on the card
        emoji.text = this.emoji[key].code;
        //android specific
        emoji.verticalAlignment = "center";
        //build the grid which is the card
        grid.cssClass = 'card ' + this.emoji[key].color;
        grid.id = 'card' + Number(key);
        grid.marginTop = this.i;
        //add the emoji to the grid, and the grid to the absolutelayout
        grid.addChild(emoji);
        absolutelayout.addChild(grid);
        //handle tapping
        /*swiperight.addEventListener("tap", function(){
            //animate yes
        });

        swipeleft.addEventListener("tap", function(){
            //animate no
        })*/
        //make card swipable
        grid.on(gestures_1.GestureTypes.swipe, function (args) {
            if (args.direction == 1) {
                //right
                yes.animate({ opacity: 0, duration: 100 })
                    .then(function () { return yes.animate({ opacity: 1, duration: 100 }); })
                    .then(function () { return yes.animate({ opacity: 0, duration: 100 }); })
                    .then(function () {
                    return grid.animate({ translate: { x: 1000, y: 100 } })
                        .then(function () { return grid.animate({ translate: { x: 0, y: -2000 } }); })
                        .catch(function (e) {
                        console.log(e.message);
                    });
                })
                    .catch(function (e) {
                    console.log(e.message);
                });
            }
            else {
                //left
                no.animate({ opacity: 0, duration: 100 })
                    .then(function () { return no.animate({ opacity: 1, duration: 100 }); })
                    .then(function () { return no.animate({ opacity: 0, duration: 100 }); })
                    .then(function () {
                    return grid.animate({ translate: { x: -1000, y: 100 } })
                        .then(function () { return grid.animate({ translate: { x: 0, y: -2000 } }); })
                        .catch(function (e) {
                        console.log(e.message);
                    });
                })
                    .catch(function (e) {
                    console.log(e.message);
                });
            }
        });
    };
    return CardComponent;
}());
__decorate([
    core_1.ViewChild("absolutelayout"),
    __metadata("design:type", core_1.ElementRef)
], CardComponent.prototype, "al", void 0);
__decorate([
    core_1.ViewChild("yes"),
    __metadata("design:type", core_1.ElementRef)
], CardComponent.prototype, "yes", void 0);
__decorate([
    core_1.ViewChild("no"),
    __metadata("design:type", core_1.ElementRef)
], CardComponent.prototype, "no", void 0);
__decorate([
    core_1.ViewChild("swipeleft"),
    __metadata("design:type", core_1.ElementRef)
], CardComponent.prototype, "swipeleft", void 0);
__decorate([
    core_1.ViewChild("swiperight"),
    __metadata("design:type", core_1.ElementRef)
], CardComponent.prototype, "swiperight", void 0);
CardComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        templateUrl: "./card.component.html"
    }),
    __metadata("design:paramtypes", [card_service_1.CardService,
        nativescript_ngx_fonticon_1.TNSFontIconService])
], CardComponent);
exports.CardComponent = CardComponent;
//# sourceMappingURL=data:application/json;base64,